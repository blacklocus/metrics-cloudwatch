////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Identifiers

group = 'com.blacklocus'
version = '0.4.1-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Plugins

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Defines

/** Function always returns a new manifest that can be customized */
def defaultManifest() {
    return manifest{
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        attributes 'SCM-Revision': git_proc.text.trim()
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
        attributes 'Build-Host': InetAddress.localHost.hostName
    }
}

def defaultBlank(closure) {
    try {
        closure()
    } catch (MissingPropertyException e) {
        ''
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// License

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
    }
}
apply plugin: 'license'

license {
    header rootProject.file('src/license/HEADER')
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.amazonaws:aws-java-sdk-cloudwatch:1.11.407'
    compile 'io.dropwizard.metrics:metrics-core:4.0.3'

    compile 'org.apache.commons:commons-lang3:3.8'
    compile 'com.google.guava:guava:23.0'
    compile 'org.slf4j:slf4j-api:1.7.25'

    testCompile 'junit:junit:4.12'
    testCompile 'org.slf4j:slf4j-simple:1.7.25'
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Artifacts

assemble {
    dependsOn licenseFormatMain, licenseFormatTest
}

jar {
    manifest = defaultManifest()
}

javadoc {
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
    manifest = defaultManifest()
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest = defaultManifest()
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Publishing

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signPom(deployment) }

        //# ./gradlew -PdeployUrl=http://server/artifactory/repo -PdeployUsername=admin -PdeployPassword=pass uploadArchives
        repository(
                url: defaultBlank({ deployUrl })
                // for snapshots
//                url: "https://oss.sonatype.org/content/repositories/snapshots/"
                // for staging/release
//                url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        ) {
            // If these are not defined assemble needlessly fails for unrelated tasks.
            authentication(userName: defaultBlank({ deployUsername }), password: defaultBlank({ deployPassword }))
        }

        pom.project {
            name 'metrics-cloudwatch'
            description "A codahale metrics reporter to Amazon CloudWatch"
            url 'https://github.com/blacklocus/metrics-cloudwatch'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'scm:https://github.com/blacklocus/metrics-cloudwatch.git'
                connection 'scm:git://github.com/blacklocus/metrics-cloudwatch.git'
                developerConnection 'scm:git@github.com:blacklocus/metrics-cloudwatch.git'
            }
            organization {
                name 'BlackLocus'
                url 'http://www.blacklocus.com'
            }
            developers {
                developer {
                    id 'dirkraft'
                    name 'Jason Dunkelberger'
                    organization 'BlackLocus'
                    organizationUrl 'http://www.blacklocus.com'
                }
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Tooling

idea {
    project {
        languageLevel = '1.8'
    }
}

task createWrapper(type: Wrapper) {
    gradleVersion = '1.8'
}
